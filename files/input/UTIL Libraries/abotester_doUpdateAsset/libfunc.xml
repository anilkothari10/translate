<?xml version="1.0" encoding="UTF-8"?>
<bm_lib_func>
	<id>40904100</id>
	<name>
		<en>
			<![CDATA[abotester_doUpdateAsset]]>
		</en>
		<de>
			<![CDATA[]]>
		</de>
		<fr>
			<![CDATA[]]>
		</fr>
		<es>
			<![CDATA[]]>
		</es>
		<it>
			<![CDATA[]]>
		</it>
		<zh_CN>
			<![CDATA[]]>
		</zh_CN>
		<zh_TW>
			<![CDATA[]]>
		</zh_TW>
		<fr_CA>
			<![CDATA[]]>
		</fr_CA>
		<ja_JP>
			<![CDATA[]]>
		</ja_JP>
		<ko_KR>
			<![CDATA[]]>
		</ko_KR>
		<pt_BR>
			<![CDATA[]]>
		</pt_BR>
		<ru_RU>
			<![CDATA[]]>
		</ru_RU>
		<pt_PT>
			<![CDATA[]]>
		</pt_PT>
	</name>
	<variable_name>
		<![CDATA[abotester_doUpdateAsset]]>
	</variable_name>
	<description>
		<en>
			<![CDATA[]]>
		</en>
		<de>
			<![CDATA[]]>
		</de>
		<fr>
			<![CDATA[]]>
		</fr>
		<es>
			<![CDATA[]]>
		</es>
		<it>
			<![CDATA[]]>
		</it>
		<zh_CN>
			<![CDATA[]]>
		</zh_CN>
		<zh_TW>
			<![CDATA[]]>
		</zh_TW>
		<fr_CA>
			<![CDATA[]]>
		</fr_CA>
		<ja_JP>
			<![CDATA[]]>
		</ja_JP>
		<ko_KR>
			<![CDATA[]]>
		</ko_KR>
		<pt_BR>
			<![CDATA[]]>
		</pt_BR>
		<ru_RU>
			<![CDATA[]]>
		</ru_RU>
		<pt_PT>
			<![CDATA[]]>
		</pt_PT>
	</description>
	<return_type>36</return_type>
	<func_type>1</func_type>
	<function_id>40904099</function_id>
	<main_script_text/>
	<date_modified>1528690629000</date_modified>
	<guid>
		<![CDATA[bm_lib_func_util_abotester_doUpdateAsset]]>
	</guid>
	<folder_id>4133367</folder_id>
	<namespace/>
	<func_override_id>-1</func_override_id>
	<namespace_permissions>0</namespace_permissions>
	<_children>
		<bm_function>
			<id>40904099</id>
			<ref_type>16</ref_type>
			<script_text>
				<![CDATA[//Function Name: abotester_doUpdateAsset
//input:txn_json(json), lines_json_array(jsonarray)
//output: response(json)
//Description: 
//    Entry level utility BML for header level 'Update Asset' test action. 
//    For the given txn and list of lines in that txn as passed in the input, it will aggregate the lines for that 
//    same product instance in order of request date to calculate the final project state and compare it with the 
//    asset state to generate CRUD operation on the asset for all lines in an atomic RESTful call.
//Logic:
//     1. sort the line array by assetkey and request date.
//     2. group the lines with the same asset key into the following structure.
//         {  instace_id:,  final_action:, final_date, lines: {  line_seq, action, txn_date}.
//     3. For each group,  
//            load base asset configuration and convert that to BOM struture
//            load BOM for each line in the group and place them as open orderline array
//            invoke abo_apply with asset and open orderline array to caculated final projected BOM
//            use abo_delta to caculate the delta state between original base asset BOM and projected BOM
//            convert the delta BOM to sync asset json format for local asset repository sync.
//     4. put all the invidual sync asset json into an array and invoke asset servcie as single atomic call.

//Step 1: Setup context
abocontext =  util._ORCL_ABO.abo_getContext();
bDiagnosisOff=jsonget(abocontext, "AboDiagnosticDisabled", "boolean", true);  
callContext="doUpdateAsset";

if(not bDiagnosisOff){//log the input
   dummy=util._ORCL_ABO.abo_addDiagnosticInfo(callContext+"_input_txnjson", txn_json,"addToSummary");
   lineJson=json(); jsonput(lineJson, "lineArray",lines_json_array);
   dummy=util._ORCL_ABO.abo_addDiagnosticInfo(callContext+"_input_linejson", lineJson,"addToSummary");
}
localAssetSvc =  jsonpathgetsingle(abocontext, "$.siteInfo.localAssetSvc");

//Step 2: Declare constants
//Constants used for line data structure
DOCUMENT_NUMBER  = "documentNumber";
CUSTOMER_ID = "customer_id";
TRANSACTION_ID = "transactionId";
CURRENCY_CODE = "currency_code";
REQUEST_DATE =  "requestDate";
ACTION_CODE =  "actionCode";
ITEM_INSTANCE_ID = "itemInstanceId";
FINALACTION = "finalAction";
FINALDATE = "finalDate";
TERMINATE =  "TERMINATE";
ORIGINALACTION = "OriginalAction";
ORIGINALREQUESTDATE =  "OriginalRequestDate";
ADD =  "ADD";
UPDATE =  "UPDATE";
SUSPEND = "SUSPEND";
RESUME = "RESUME";
RENEW = "RENEW";
SUSPENDDATE = "suspendDate";
RESUMEDATE = "resumeDate";
RENEWDATE = "renewDate";

//Constants used for getBom query
TRANSACTIONDATE = "requestDate_l"; 
ACTION = "oRCL_ABO_ActionCode_l";
ITEM_INSTANCE_NAME = "itemInstanceName_l";

//Constants for internal logic
LINES = "Lines";

//List of fields need to be retrieved in getBom call
extraAssetFields =  jsonget(abocontext, "extraLineFieldForAsset", "json", json());
lineFields =  jsonKeys(extraAssetFields);
sizeofExtraAssetFieldLst =  sizeofarray(lineFields);

lineFields[sizeofExtraAssetFieldLst] = ACTION;
lineFields[sizeofExtraAssetFieldLst+1] = TRANSACTIONDATE;
lineFields[sizeofExtraAssetFieldLst+2] = ITEM_INSTANCE_NAME;

// Initialize the arrays
jsonArrforSync =  jsonarray();
syncAssetJson = json();
    
//Step 3:  Sort the lines by assetKey and then date in ascending
// If line.txnDate is empty, updateAsset action script will populate it with today's date during lineJson creation
jsoncrit =  jsonarray();
jsoncrit = jsonarray();
crit1= json("{\"field\":\"itemInstanceId\",\"order\":\"desc\"}");//type default to string
crit2= json("{\"field\":\"requestDate\",\"order\":\"asc\",\"dateFormat\": \"yyyy-MM-dd\"}");
jsonarrayappend(jsoncrit,crit1);
jsonarrayappend(jsoncrit,crit2);
linesJsonArr =  util._ORCL_ABO.abo_jsonSort(lines_json_array, jsoncrit);

if(not bDiagnosisOff){//log the sorted array
   logJson=json(); 
   jsonput(logJson, "sortedLines",linesJsonArr);
   jsonput(logJson, "crit",jsoncrit);   
   dummy=util._ORCL_ABO.abo_addDiagnosticInfo(callContext+"_sortingResult", logJson,"");
}

//Step 4: Since it has already been sorted, we just need to scan it in one pass
sizeoflineArr =  jsonarraysize(linesjsonarr);
dummyTraverseArray = string[sizeoflineArr];

//retrieve transaction data
transactionId =  jsonget(txn_json, TRANSACTION_ID, "string", "");
bsId =  atoi(transactionId );

jsonArrforSync =  jsonarray();
curAssetkey="";
index =  0;
finalActionforCurGrp = "";
grpJsonforProcessing =  jsonarray();
lineGrpJsonArr =  jsonarray();
curGrpJson =  json();

// since lines_json_array is already sorted based on assetKey, requestDate, we just need to scan them once
for oneItem in dummyTraverseArray{
   oneLine = jsonarrayget(linesJsonArr, index, "json");
   index = index + 1;

   nextAssetKey= jsonget(oneLine, ITEM_INSTANCE_ID, "string", "");
   reqDate =  jsonget(oneLine, REQUEST_DATE, "string", "");
   actionCode = jsonget(oneLine, ACTION_CODE, "string", "");
      
   if(curAssetKey <> nextAssetKey){ 
      //now it is a new group,  notice we initialize curAssetKey to "", so first line will trigger this logic as well
      curGrpJson =  json();
      lineGrpJsonArr = jsonArray();
      jsonput(curGrpJson, ITEM_INSTANCE_ID, nextAssetKey);
      curGrpJson = jsonarrayappend(grpJsonforProcessing, curGrpJson);
      lineGrpJsonArr =  jsonput(curGrpJson,  LINES, lineGrpJsonArr);
      curAssetKey =  nextAssetKey;
      finalActionforCurGrp = "";       
      jsonput(curGrpJson, ORIGINALACTION, actionCode);
      jsonput(curGrpJson, ORIGINALREQUESTDATE, reqDate);
   }   
   //add line to current group
   jsonarrayappend(lineGrpJsonArr, oneLine); 
   
   if(finalActionforCurGrp==TERMINATE){ 
       // all lines after terminate will be igored.
       // PLACEHOLDER, you could choose to throw error in this case as well.
       // You could run into this situation if user does a Follow-On Order on d2, and then terminate on d1,
       // Assuming "d1" and "d2" are referring to dates 
       // or additional logic can be added in abo_prepareInstance to prevent this to happen
       continue;
   }
   
   if( actionCode == TERMINATE ){ 
      //keep track of first terminate line
      finalActionforCurGrp = TERMINATE;
      jsonput(curGrpJson, FINALACTION , actionCode);
      jsonput(curGrpJson, FINALDATE, reqDate);
   }      
   
   if (actionCode == SUSPEND) {
      jsonput(curGrpJson, SUSPENDDATE, reqDate);    
  }
  
  if (actionCode == RESUME) {
      jsonput(curGrpJson, RESUMEDATE, reqDate); 
  }
  
  if (actionCode == RENEW) {
      jsonput(curGrpJson, RENEWDATE, reqDate);  
  }
}// end of loop through lines to group them together by assetKey.

if(not bDiagnosisOff){//log the output of group
   logJson=json(); jsonput(logJson, "arrGroups", grpJsonforProcessing);
   dummy=util._ORCL_ABO.abo_addDiagnosticInfo(callContext+"_groupedLines", logJson,"addToSummary");
}

//Step 5: Loop through each group, Call apply, delta and add the resultant json for sync in jsonArrforSync
//calculate today's date in db format. If txnDate is emtpy in getBom, we will replace it with today
//so that down stream procesing will not need to worry about this.
tranDate = getDate(false);
today =  datetostr(tranDate, "yyyy-MM-dd HH:mm:ss");

sizeofgrpForProcessing =  jsonarraysize(grpJsonforProcessing);
dummyArr =  string[sizeofgrpForProcessing];
index = 0;
curGrpJson =  json();

for oneItem in dummyArr{//loop thru groups
   oneJson =  jsonarrayget(grpJsonforProcessing, index, "json");
   index = index+1;
   
   //Step 5.1: Load base asset and convert to BOM structure
   assetId =  jsonget(oneJson, ITEM_INSTANCE_ID, "string", "");   
    
   baseBom = util._ORCL_ABO.abo_loadAsset(assetId);

   //Step 5.2: Loop through order lines, and retrieve corresponding BOM.
   lineGrpJsonArray = jsonget(oneJson, LINES, "jsonarray");
   numberofLines =  jsonarraysize(lineGrpJsonArray);
   dummytraverseArr = string[numberofLines];
   arrBomtoApply = jsonarray();
   //prepare open quote BOM array 
   docNum = "";
   lineGrpJsonArrIndex = 0;
   actionCodeofOneQuoteBom = "";     
   
   for item in dummytraverseArr{ //loop through lines within a group

      oneLineJson =  jsonarrayget(lineGrpJsonArray, lineGrpJsonArrIndex, "json");
      lineGrpJsonArrIndex = lineGrpJsonArrIndex +1;     

      //check if it is external process or internal -  This value is set to true in updateExternal function ONLY
      isExternal=jsonget(oneLineJson, "isExternal", "string","false");
 
      // intialize json
      oneQuoteBom = json();
 
      // if it is an external process, retrieve the BOM from the config integration table
     if(isExternal == "true"){
     
          //  Get the config id from line
          config_id = jsonget(oneLineJson, "_document_number", "string","");
          
          // get flatten BOM 
           oneQuoteBom = getconfigbom(atoi(config_id),true);
           
           oneQuoteBom = jsonarrayappend(arrBomtoApply, oneQuoteBom); 
           
       } else {
           // This is CPQ Transaction - hence retrieve data using the transactionId
           transactionId =  jsonget(txn_json, TRANSACTION_ID, "string", "");
           docNum =  jsonget(oneLineJson, DOCUMENT_NUMBER, "string");
           lineNum =  atoi(docNum);
           bsId =  atoi(transactionId );
        
           oneQuoteBom = getbom(bsId, lineNum, lineFields, 
                false,  //validate
                true,  //flatten
                true); //isSalesBom
           oneQuoteBom = jsonarrayappend(arrBomtoApply, oneQuoteBom); 
      }
      fieldJsonofOneQuoteBom =  jsonget(oneQuoteBom, "fields", "json", json());
      
      //adjust the action code for apply as current apply logic will throw error when trying to apply terminate lines
      //here we just leverage the apply logic to calculate the projected BOM state. This removes the child of terminate lines which is marked for delete.
      //Terminate line will be the last line to apply(as enforced in Step 4 grouping logic).
      actionCodeofOneQuoteBom =  jsonget(fieldJsonofOneQuoteBom, ACTION, "string", "");  
      if(actionCodeofOneQuoteBom==TERMINATE){
          jsonput(fieldJsonofOneQuoteBom, ACTION, UPDATE);
      }
      
      //if line did not specify transactionDate, put in the default date of today 
      requestDateinOneQuoteBom = jsonget(fieldJsonofOneQuoteBom, TRANSACTIONDATE, "string", "");  
      if(requestDateinOneQuoteBom == ""){         
         jsonput(fieldJsonofOneQuoteBom, TRANSACTIONDATE, today);
      }      
      reqDate =  jsonget(oneLineJson, REQUEST_DATE, "string",today);
            
      // for terminate, suspend resume case set the group summary
      
      if (actionCodeofOneQuoteBom == ADD) {
         jsonput(oneJson, ORIGINALACTION, actionCodeofOneQuoteBom);
         jsonput(oneJson, ORIGINALREQUESTDATE,today);
       }
      if (actionCodeofOneQuoteBom == TERMINATE)  {
         jsonput(oneJson, FINALACTION,actionCodeofOneQuoteBom);
         jsonput(oneJson, FINALDATE,reqDate);
       }
      if (actionCodeofOneQuoteBom == SUSPEND)  {
         jsonput(oneJson, SUSPENDDATE, reqDate);
      }
      if (actionCodeofOneQuoteBom == RESUME)  {
         jsonput(oneJson, RESUMEDATE, reqDate);
      }
      if (actionCodeofOneQuoteBom == RENEW)  {
         jsonput(oneJson, RENEWDATE, reqDate);
       }    
   } //end of Step 5.2 loop through lines within a group to generate open order BOM array
  
   //Step 5.3: Apply open order on base asset to calculate the projected final asset state
   baseBomCopy = jsoncopy(baseBom);
   pacBom = util._ORCL_ABO.abo_apply(baseBom, arrBomtoApply);   
   
   //Step 5.4: Compare projected state with base asset to get delta
   deltaBom = util._ORCL_ABO.abo_processDeltaBom(baseBomCopy, pacBom);   
   jsonput(deltaBom,  "groupSummary", oneJson);
   
   //Step 5.5: Convert delta BOM to sync asset json format
   syncAssetJson =  util._ORCL_ABO.abo_convertDeltaBomtoAsset(deltaBom, txn_json);
   jsonarrayappend(jsonArrforSync, syncAssetJson);   
   
}//end of Step 5, loop through groups of assets

//Step 6: Invoke local asset repository sync servcie to apply the change on asset repository atomically.
//
//prepare final payload to invoke local asset repository
itemsjson = json();
jsonput(itemsjson, "items", jsonArrforSync);
jsonforpost = json();
jsonput(jsonforpost, "_client_driven_action",true );
jsonput(jsonforpost, "documents",itemsjson );

finalUrl = localAssetSvc+"/actions/synchronize";

returnVal =  json();
instructionJson=json();
jsonput(instructionJson,"Url",finalUrl);
jsonput(instructionJson,"payload",jsonforpost);
jsonput(instructionJson,"method","post");

//if (runService <> false) {
if (true) {//updated by Piyush on 06/10/2018 for testing
    responseJson = util._ORCL_ABO.abo_invokeRESTService("post",finalUrl, jsonforpost);
    jsonput(instructionJson,"response",responseJson);
    jsonput(returnVal,"Successfully Invoked Asset Service with following details:",instructionJson);   
}
else
{
    jsonput(returnVal,"Please Invoke Asset Service with following details:",instructionJson);   
}
return returnVal;]]>
			</script_text>
			<java_class_name>
				<![CDATA[com.bm.xchange.bmscript.bmllib.util.LibFunction_abotester_doUpdateAsset_1]]>
			</java_class_name>
			<child_class_names/>
			<date_modified>1528690629000</date_modified>
			<guid>
				<![CDATA[91fe2a7e-58c1-4886-b684-bb43d2df8830]]>
			</guid>
			<_children>
				<bm_lib_func_assoc>
					<id>40904102</id>
					<caller_func_id>40904099</caller_func_id>
					<called_lib_func_id>40882538</called_lib_func_id>
					<rule_area>
						<![CDATA[abotester_doUpdateAsset]]>
					</rule_area>
					<area_num>-1</area_num>
					<ref_id>-1</ref_id>
					<ref_location>5</ref_location>
					<date_modified>1528690629000</date_modified>
					<called_lib_func_type>1</called_lib_func_type>
					<guid>
						<![CDATA[df120244-c64f-49a9-8087-8e27d786394e]]>
					</guid>
				</bm_lib_func_assoc>
				<bm_lib_func_assoc>
					<id>40904103</id>
					<caller_func_id>40904099</caller_func_id>
					<called_lib_func_id>40882576</called_lib_func_id>
					<rule_area>
						<![CDATA[abotester_doUpdateAsset]]>
					</rule_area>
					<area_num>-1</area_num>
					<ref_id>-1</ref_id>
					<ref_location>5</ref_location>
					<date_modified>1528690629000</date_modified>
					<called_lib_func_type>1</called_lib_func_type>
					<guid>
						<![CDATA[9b5573f2-c4ee-4ac9-a875-c420a1228b81]]>
					</guid>
				</bm_lib_func_assoc>
				<bm_lib_func_assoc>
					<id>40904104</id>
					<caller_func_id>40904099</caller_func_id>
					<called_lib_func_id>40882567</called_lib_func_id>
					<rule_area>
						<![CDATA[abotester_doUpdateAsset]]>
					</rule_area>
					<area_num>-1</area_num>
					<ref_id>-1</ref_id>
					<ref_location>5</ref_location>
					<date_modified>1528690629000</date_modified>
					<called_lib_func_type>1</called_lib_func_type>
					<guid>
						<![CDATA[456bea19-1be8-4d61-9956-18b1a799f061]]>
					</guid>
				</bm_lib_func_assoc>
				<bm_lib_func_assoc>
					<id>40904105</id>
					<caller_func_id>40904099</caller_func_id>
					<called_lib_func_id>40882641</called_lib_func_id>
					<rule_area>
						<![CDATA[abotester_doUpdateAsset]]>
					</rule_area>
					<area_num>-1</area_num>
					<ref_id>-1</ref_id>
					<ref_location>5</ref_location>
					<date_modified>1528690629000</date_modified>
					<called_lib_func_type>1</called_lib_func_type>
					<guid>
						<![CDATA[6ac2d1e8-5099-434f-9a6a-bdfaf8e54e98]]>
					</guid>
				</bm_lib_func_assoc>
				<bm_lib_func_assoc>
					<id>40904106</id>
					<caller_func_id>40904099</caller_func_id>
					<called_lib_func_id>40882682</called_lib_func_id>
					<rule_area>
						<![CDATA[abotester_doUpdateAsset]]>
					</rule_area>
					<area_num>-1</area_num>
					<ref_id>-1</ref_id>
					<ref_location>5</ref_location>
					<date_modified>1528690629000</date_modified>
					<called_lib_func_type>1</called_lib_func_type>
					<guid>
						<![CDATA[47fcd051-7e1e-460d-9c39-cea79d4ecef0]]>
					</guid>
				</bm_lib_func_assoc>
				<bm_lib_func_assoc>
					<id>40904107</id>
					<caller_func_id>40904099</caller_func_id>
					<called_lib_func_id>40882979</called_lib_func_id>
					<rule_area>
						<![CDATA[abotester_doUpdateAsset]]>
					</rule_area>
					<area_num>-1</area_num>
					<ref_id>-1</ref_id>
					<ref_location>5</ref_location>
					<date_modified>1528690629000</date_modified>
					<called_lib_func_type>1</called_lib_func_type>
					<guid>
						<![CDATA[6ed39fed-6f94-4226-8787-ee5bf1322a1a]]>
					</guid>
				</bm_lib_func_assoc>
				<bm_lib_func_assoc>
					<id>40904108</id>
					<caller_func_id>40904099</caller_func_id>
					<called_lib_func_id>40883163</called_lib_func_id>
					<rule_area>
						<![CDATA[abotester_doUpdateAsset]]>
					</rule_area>
					<area_num>-1</area_num>
					<ref_id>-1</ref_id>
					<ref_location>5</ref_location>
					<date_modified>1528690629000</date_modified>
					<called_lib_func_type>1</called_lib_func_type>
					<guid>
						<![CDATA[4ddaa76b-6a90-4ac5-8d92-bab53a8c177f]]>
					</guid>
				</bm_lib_func_assoc>
				<bm_lib_func_assoc>
					<id>40904109</id>
					<caller_func_id>40904099</caller_func_id>
					<called_lib_func_id>40882623</called_lib_func_id>
					<rule_area>
						<![CDATA[abotester_doUpdateAsset]]>
					</rule_area>
					<area_num>-1</area_num>
					<ref_id>-1</ref_id>
					<ref_location>5</ref_location>
					<date_modified>1528690629000</date_modified>
					<called_lib_func_type>1</called_lib_func_type>
					<guid>
						<![CDATA[3f47bd34-57a9-4092-ac7a-9ee0d66878fc]]>
					</guid>
				</bm_lib_func_assoc>
			</_children>
		</bm_function>
		<bm_lib_func_param>
			<id>40904110</id>
			<bm_lib_func_id>40904100</bm_lib_func_id>
			<param_name>
				<![CDATA[txn_json]]>
			</param_name>
			<ref_id>-1</ref_id>
			<param_location>0</param_location>
			<param_type>-1</param_type>
			<datatype>31</datatype>
			<date_modified>1528690629000</date_modified>
			<order_no>1</order_no>
			<guid>
				<![CDATA[bm_lib_func_util_abotester_doUpdateAsset.bm_lib_func_param_txn_json_31]]>
			</guid>
		</bm_lib_func_param>
		<bm_lib_func_param>
			<id>40904111</id>
			<bm_lib_func_id>40904100</bm_lib_func_id>
			<param_name>
				<![CDATA[lines_json_array]]>
			</param_name>
			<ref_id>-1</ref_id>
			<param_location>0</param_location>
			<param_type>-1</param_type>
			<datatype>32</datatype>
			<date_modified>1528690629000</date_modified>
			<order_no>2</order_no>
			<guid>
				<![CDATA[bm_lib_func_util_abotester_doUpdateAsset.bm_lib_func_param_lines_json_array_32]]>
			</guid>
		</bm_lib_func_param>
		<bm_lib_func_param>
			<id>40905242</id>
			<bm_lib_func_id>40904100</bm_lib_func_id>
			<param_name>
				<![CDATA[runAutomatically]]>
			</param_name>
			<ref_id>-1</ref_id>
			<param_location>0</param_location>
			<param_type>-1</param_type>
			<datatype>0</datatype>
			<date_modified>1528690629000</date_modified>
			<order_no>3</order_no>
			<guid>
				<![CDATA[bm_lib_func_util_abotester_doUpdateAsset.bm_lib_func_param_runAutomatically_0]]>
			</guid>
		</bm_lib_func_param>
	</_children>
</bm_lib_func>